{"version":3,"mappings":"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","names":["KIOSK_CONFIG","stored","AVAILABLE_HOSPITALS","setHospital","hospitalId","hospital","h","URGENCY_CONFIG","CONSTANTS","getRiskColor","percent","getRiskLevel","formatTime","isoString","date","error","getRelevantTimestamp","caseData","getTimeAgo","timestamp","now","then","seconds","minutes","formatETA","duration","eta","isGPSStale","lastUpdated","thresholdMinutes","lastUpdate","isCaseStale","created","validateCaseData","createTimeoutSignal","timeoutMs","controller","timeoutId","sleep","ms","resolve","FIELD_LABEL_MAP","PATTERN_REPLACEMENTS","formatDriverName","fieldName","mapped","formatted","pattern","replacement","l","formatSummaryLabel","formatDisplayValue","value","lower","CaseListener","onUpdateCallback","onErrorCallback","lastError","attempt","url","response","data","delayMs","params","queryString","newCases","oldCaseIds","newCaseIds","caseId","isNew","gpsStale","enrichedTracking","ichPercent","caseListener","renderDashboard","cases","container","sortedCases","sortCases","cardsHTML","renderCaseCard","truncatedWarning","a","b","urgencyA","urgencyB","etaA","etaB","urgencyConfig","lvoPercent","formattedETA","distance","isGpsStale","relevantTimestamp","caseIsStale","receivedAgo","ariaLabel","getRiskLevelClass","showCaseDetail","modal","modalContent","renderDetailView","results","formData","moduleType","ambulanceId","tracking","urgency","createdAt","updatedAt","ichLevel","lvoLevel","cardCount","layoutClass","getUrgencyColor","renderEnhancedRiskCard","renderEntscheidungshilfe","renderEnhancedDriversSection","renderFormData","type","level","icons","titles","color","riskLevelText","circumference","offset","volumeRingHtml","renderICHVolumeRing","html","renderEnhancedDriversPanel","drivers","title","probability","positiveDrivers","negativeDrivers","allWeights","d","maxWeight","totalPositiveWeight","sum","totalNegativeWeight","relativeImportance","barWidth","renderCompactDriver","driver","renderModularInputSummary","renderFlatInputSummary","summaryHtml","module","moduleTitle","itemsHtml","key","label","displayValue","getGFAPValue","estimateICHVolume","gfapValue","logGFAP","estimatedVolume","getVolumeColor","volume","volumeColor","volumePercent","volumeDisplay","ratio","absDiff","needleAngle","recommendation","confidence","currentCases","audioContext","clockIntervalId","isFirstLoad","initializeKiosk","initializeHospitalSelector","updateClock","initializeAudio","handleCaseUpdate","handleError","attachEventListeners","cleanup","err","previousCount","updateHeader","c","playNewCaseAlert","flashScreen","updateConnectionStatus","selector","__vitePreload","config","isSelected","e","countBadge","count","connected","status","clockElement","oscillator","gainNode","caseCard","closeModal","event"],"ignoreList":[],"sources":["../../src/config.js","../../src/utils.js","../../src/services/case-listener.js","../../src/ui/dashboard.js","../../src/ui/case-detail.js","../../src/main.js"],"sourcesContent":["/**\n * Kiosk Configuration\n */\n\n// Check if running in development\nconst isDevelopment = import.meta.env.DEV;\n\nexport const KIOSK_CONFIG = {\n  // API Configuration\n  caseSharingUrl: isDevelopment\n    ? 'http://localhost:8080' // Local Cloud Function emulator\n    : 'https://case-sharing-564499947017.europe-west3.run.app',\n\n  // Polling interval (milliseconds)\n  pollInterval: 5000, // 5 seconds\n\n  // Auto-archive time (matches server)\n  autoArchiveHours: 2,\n\n  // GPS stale warning threshold\n  staleGpsMinutes: 5,\n\n  // Hospital ID (can be changed via UI selector)\n  // Leave as null to show all cases, or set to specific hospital ID\n  hospitalId: (() => {\n    const stored = localStorage.getItem('kiosk_hospital_id');\n    // Explicitly check for null (not set) vs empty string (ALL selected)\n    if (stored === null) return 'BY-NS-001'; // Default on first load\n    if (stored === '') return null; // \"ALL\" hospitals\n    return stored; // Specific hospital\n  })(),\n\n  // Hospital name for display (updated dynamically)\n  hospitalName: localStorage.getItem('kiosk_hospital_name') || 'LMU Klinikum München - Großhadern',\n\n  // Google Maps API Key (for live tracking map)\n  googleMapsApiKey: 'AIzaSyACBndIj8HD1wwZ4Vw8PDDI0bIe6DoBExI',\n\n  // Alert settings\n  playAudioAlert: true,\n  audioAlertVolume: 0.5, // 0.0 to 1.0\n\n  // Display settings\n  showArchivedCases: false, // Hide archived cases\n  maxCasesDisplay: 20, // Maximum cases to show\n\n  // Theme\n  theme: 'dark', // 'dark' or 'light'\n};\n\n// Available hospitals for selector\nexport const AVAILABLE_HOSPITALS = [\n  { id: 'BY-NS-001', name: 'LMU Klinikum München - Großhadern' },\n  { id: 'BY-NS-002', name: 'Klinikum Rechts der Isar' },\n  { id: 'BY-NS-003', name: 'Helios Klinikum München West' },\n  { id: 'BY-NS-004', name: 'Klinikum Bogenhausen' },\n  { id: 'BW-NS-001', name: 'Universitätsklinikum Tübingen' },\n  { id: 'BW-NS-005', name: 'Klinikum Stuttgart - Katharinenhospital' },\n  { id: 'BW-NS-003', name: 'Universitätsklinikum Freiburg' },\n  { id: 'ALL', name: '🌐 All Hospitals (Show All Cases)' },\n];\n\n// Function to update hospital selection\nexport function setHospital(hospitalId) {\n  const hospital = AVAILABLE_HOSPITALS.find(h => h.id === hospitalId);\n  if (hospital) {\n    // Store the actual value or empty string for \"ALL\"\n    if (hospitalId === 'ALL') {\n      localStorage.setItem('kiosk_hospital_id', '');\n      localStorage.setItem('kiosk_hospital_name', hospital.name);\n    } else {\n      localStorage.setItem('kiosk_hospital_id', hospitalId);\n      localStorage.setItem('kiosk_hospital_name', hospital.name);\n    }\n    KIOSK_CONFIG.hospitalId = hospitalId === 'ALL' ? null : hospitalId;\n    KIOSK_CONFIG.hospitalName = hospital.name;\n    // Reload to apply changes\n    window.location.reload();\n  }\n}\n\nexport const URGENCY_CONFIG = {\n  IMMEDIATE: {\n    color: '#ff4444',\n    icon: '🚨',\n    priority: 0,\n  },\n  TIME_CRITICAL: {\n    color: '#ff8800',\n    icon: '⏰',\n    priority: 1,\n  },\n  URGENT: {\n    color: '#ffcc00',\n    icon: '⚠️',\n    priority: 2,\n  },\n  STANDARD: {\n    color: '#4a90e2',\n    icon: '🏥',\n    priority: 3,\n  },\n};\n","/**\n * Shared Utility Functions\n */\n\n// Constants for magic numbers\nexport const CONSTANTS = {\n  NEW_CASE_VIEWED_DELAY_MS: 2000,\n  ALERT_BEEP_DURATION_SEC: 0.5,\n  ALERT_BEEP_FREQUENCY_HZ: 880, // A5 note\n  ALERT_BEEP_VOLUME: 0.5,\n  FETCH_TIMEOUT_MS: 8000,\n  MAX_RETRY_ATTEMPTS: 3,\n  RETRY_DELAYS_MS: [2000, 4000, 8000], // Exponential backoff\n  CASE_STALE_THRESHOLD_MINUTES: 30,\n};\n\n/**\n * Get risk color based on percentage\n * @param {number} percent - Risk percentage (0-100)\n * @returns {string} Hex color code\n */\nexport function getRiskColor(percent) {\n  if (percent > 70) {\n    return '#ff4444';\n  }\n  if (percent > 50) {\n    return '#ff8800';\n  }\n  if (percent > 30) {\n    return '#ffcc00';\n  }\n  return '#4a90e2';\n}\n\n/**\n * Get risk level label based on percentage\n * @param {number} percent - Risk percentage (0-100)\n * @returns {string} Risk level description\n */\nexport function getRiskLevel(percent) {\n  if (percent > 70) {\n    return 'Very High Risk';\n  }\n  if (percent > 50) {\n    return 'High Risk';\n  }\n  if (percent > 30) {\n    return 'Moderate Risk';\n  }\n  return 'Low Risk';\n}\n\n/**\n * Format timestamp as time string\n * @param {string} isoString - ISO date string\n * @returns {string} Formatted time (HH:MM)\n */\nexport function formatTime(isoString) {\n  try {\n    const date = new Date(isoString);\n    if (isNaN(date.getTime())) {\n      throw new Error('Invalid date');\n    }\n    return date.toLocaleTimeString('de-DE', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  } catch (error) {\n    console.warn('[Utils] Invalid time:', isoString, error);\n    return 'Invalid time';\n  }\n}\n\n/**\n * Get the most relevant timestamp for display\n * Priority: updatedAt > receivedAt > tracking.lastUpdated > createdAt\n * @param {object} caseData - Case data object\n * @returns {string|Date} Timestamp (ISO string or Date object)\n */\nexport function getRelevantTimestamp(caseData) {\n  // Priority 1: updatedAt (when case was last modified/submitted)\n  if (caseData.updatedAt) {\n    return caseData.updatedAt;\n  }\n\n  // Priority 2: receivedAt (when kiosk first saw this case - most reliable)\n  // This is our local timestamp and most accurate for \"when did we see this\"\n  if (caseData.receivedAt) {\n    return caseData.receivedAt;\n  }\n\n  // Priority 3: tracking.lastUpdated (recent GPS update)\n  if (caseData.tracking?.lastUpdated) {\n    return caseData.tracking.lastUpdated;\n  }\n\n  // Priority 4: createdAt (fallback - may be hours old if form was started earlier)\n  return caseData.createdAt || new Date();\n}\n\n/**\n * Get time ago string with negative time protection\n * @param {string|Date} timestamp - ISO date string or Date object\n * @returns {string} Time ago description\n */\nexport function getTimeAgo(timestamp) {\n  const now = new Date();\n\n  // Handle both Date objects and ISO strings\n  const then = timestamp instanceof Date ? timestamp : new Date(timestamp);\n\n  // Protect against invalid dates or future dates\n  if (isNaN(then.getTime())) {\n    return 'Unknown';\n  }\n\n  const seconds = Math.max(0, Math.floor((now - then) / 1000));\n\n  if (seconds < 60) {\n    return `${seconds}s ago`;\n  }\n  const minutes = Math.floor(seconds / 60);\n  if (minutes < 60) {\n    return `${minutes}m ago`;\n  }\n  const hours = Math.floor(minutes / 60);\n  return `${hours}h ${minutes % 60}m ago`;\n}\n\n/**\n * Format label from snake_case to Title Case\n * @param {string} key - Key to format\n * @returns {string} Formatted label\n */\nexport function formatLabel(key) {\n  return key\n    .replace(/_/g, ' ')\n    .replace(/\\b\\w/g, (l) => l.toUpperCase());\n}\n\n/**\n * Format ETA with special cases\n * @param {number|string} duration - Duration in minutes\n * @returns {string} Formatted ETA\n */\nexport function formatETA(duration) {\n  if (duration === null || duration === undefined || duration === '?') {\n    return '?';\n  }\n\n  const eta = typeof duration === 'string' ? parseFloat(duration) : duration;\n\n  if (isNaN(eta)) {\n    return '?';\n  }\n\n  if (eta <= 0) {\n    return 'Arrived';\n  }\n\n  if (eta < 1) {\n    return '< 1';\n  }\n\n  return Math.round(eta).toString();\n}\n\n/**\n * Check if GPS data is stale\n * @param {string} lastUpdated - ISO date string of last GPS update\n * @param {number} thresholdMinutes - Staleness threshold in minutes\n * @returns {boolean} True if GPS is stale\n */\nexport function isGPSStale(lastUpdated, thresholdMinutes = 5) {\n  if (!lastUpdated) {\n    return true;\n  }\n\n  try {\n    const lastUpdate = new Date(lastUpdated);\n    if (isNaN(lastUpdate.getTime())) {\n      return true;\n    }\n\n    const now = new Date();\n    const minutesAgo = (now - lastUpdate) / (1000 * 60);\n    return minutesAgo > thresholdMinutes;\n  } catch {\n    return true;\n  }\n}\n\n/**\n * Check if case is stale (old)\n * @param {string|Date} timestamp - ISO date string or Date object\n * @param {number} thresholdMinutes - Staleness threshold in minutes\n * @returns {boolean} True if case is stale\n */\nexport function isCaseStale(timestamp, thresholdMinutes = CONSTANTS.CASE_STALE_THRESHOLD_MINUTES) {\n  if (!timestamp) {\n    return false;\n  }\n\n  try {\n    // Handle both Date objects and ISO strings\n    const created = timestamp instanceof Date ? timestamp : new Date(timestamp);\n    if (isNaN(created.getTime())) {\n      return false;\n    }\n\n    const now = new Date();\n    const minutesAgo = (now - created) / (1000 * 60);\n    return minutesAgo > thresholdMinutes;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Validate case data structure\n * @param {object} caseData - Case object to validate\n * @returns {boolean} True if valid\n */\nexport function validateCaseData(caseData) {\n  if (!caseData || typeof caseData !== 'object') {\n    return false;\n  }\n\n  // Required fields\n  if (!caseData.id || typeof caseData.id !== 'string') {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Safe get nested property\n * @param {object} obj - Object to query\n * @param {string} path - Dot-separated path (e.g., 'results.ich.probability')\n * @param {*} defaultValue - Default value if not found\n * @returns {*} Value or default\n */\nexport function safeGet(obj, path, defaultValue = null) {\n  try {\n    return path.split('.').reduce((current, prop) => current?.[prop], obj) ?? defaultValue;\n  } catch {\n    return defaultValue;\n  }\n}\n\n/**\n * Create AbortSignal with timeout (polyfill for older browsers)\n * @param {number} timeoutMs - Timeout in milliseconds\n * @returns {AbortSignal} Abort signal that fires after timeout\n */\nexport function createTimeoutSignal(timeoutMs) {\n  // Use native AbortSignal.timeout if available (modern browsers)\n  if (typeof AbortSignal !== 'undefined' && AbortSignal.timeout) {\n    return AbortSignal.timeout(timeoutMs);\n  }\n\n  // Polyfill for older browsers\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => {\n    controller.abort(new Error(`Timeout after ${timeoutMs}ms`));\n  }, timeoutMs);\n\n  // Clean up timeout if signal is aborted for other reasons\n  controller.signal.addEventListener('abort', () => {\n    clearTimeout(timeoutId);\n  }, { once: true });\n\n  return controller.signal;\n}\n\n/**\n * Sleep utility for retry logic\n * @param {number} ms - Milliseconds to sleep\n * @returns {Promise} Promise that resolves after delay\n */\nexport function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Medical field label mapping for consistent terminology\n * Maps technical field names to user-friendly medical labels\n */\nconst FIELD_LABEL_MAP = {\n  // Age and demographics\n  age_years: 'Alter / Age',\n  age: 'Alter / Age',\n\n  // Blood pressure\n  systolic_bp: 'Systolischer Blutdruck / Systolic BP',\n  diastolic_bp: 'Diastolischer Blutdruck / Diastolic BP',\n  systolic_blood_pressure: 'Systolischer Blutdruck / Systolic BP',\n  diastolic_blood_pressure: 'Diastolischer Blutdruck / Diastolic BP',\n  blood_pressure_systolic: 'Systolischer Blutdruck / Systolic BP',\n  blood_pressure_diastolic: 'Diastolischer Blutdruck / Diastolic BP',\n\n  // Biomarkers\n  gfap_value: 'GFAP-Wert / GFAP Level',\n  gfap: 'GFAP-Wert / GFAP Level',\n  gfap_level: 'GFAP-Wert / GFAP Level',\n\n  // Clinical scores\n  fast_ed_score: 'FAST-ED Score',\n  fast_ed: 'FAST-ED Score',\n  fast_ed_total: 'FAST-ED Score',\n  nihss: 'NIHSS Score',\n  nihss_score: 'NIHSS Score',\n\n  // Neurological symptoms\n  vigilanzminderung: 'Vigilanzminderung / Reduced Consciousness',\n  vigilance_reduction: 'Vigilanzminderung / Reduced Consciousness',\n  reduced_consciousness: 'Vigilanzminderung / Reduced Consciousness',\n  armparese: 'Armparese / Arm Weakness',\n  arm_paresis: 'Armparese / Arm Weakness',\n  arm_weakness: 'Armparese / Arm Weakness',\n  beinparese: 'Beinparese / Leg Weakness',\n  leg_paresis: 'Beinparese / Leg Weakness',\n  leg_weakness: 'Beinparese / Leg Weakness',\n  eye_deviation: 'Blickdeviation / Eye Deviation',\n  blickdeviation: 'Blickdeviation / Eye Deviation',\n  headache: 'Kopfschmerzen / Headache',\n  kopfschmerzen: 'Kopfschmerzen / Headache',\n  nausea: 'Übelkeit / Nausea',\n  vomiting: 'Erbrechen / Vomiting',\n  aphasia: 'Aphasie / Aphasia',\n  dysarthria: 'Dysarthrie / Dysarthria',\n  ataxia: 'Ataxie / Ataxia',\n  facial_paresis: 'Gesichtsparese / Facial Weakness',\n\n  // Medical history\n  atrial_fibrillation: 'Vorhofflimmern / Atrial Fibrillation',\n  vorhofflimmern: 'Vorhofflimmern / Atrial Fibrillation',\n  anticoagulated_noak: 'Antikoagulation (NOAK) / Anticoagulation (NOAC)',\n  anticoagulation: 'Antikoagulation / Anticoagulation',\n  antiplatelets: 'Thrombozytenaggregationshemmer / Antiplatelets',\n  thrombozytenaggregationshemmer: 'Thrombozytenaggregationshemmer / Antiplatelets',\n  diabetes: 'Diabetes Mellitus',\n  hypertension: 'Arterielle Hypertonie / Hypertension',\n  prior_stroke: 'Schlaganfall (Anamnese) / Prior Stroke',\n  prior_tia: 'TIA (Anamnese) / Prior TIA',\n\n  // Timing\n  symptom_onset: 'Symptombeginn / Symptom Onset',\n  onset_time: 'Symptombeginn / Symptom Onset',\n  time_since_onset: 'Zeit seit Symptombeginn / Time Since Onset',\n};\n\n/**\n * Pattern-based replacements for common medical terms\n */\nconst PATTERN_REPLACEMENTS = [\n  { pattern: /_score$/i, replacement: ' Score' },\n  { pattern: /_value$/i, replacement: ' Wert' },\n  { pattern: /_bp$/i, replacement: ' Blutdruck' },\n  { pattern: /_years?$/i, replacement: '' },\n  { pattern: /^ich_/i, replacement: 'ICH ' },\n  { pattern: /^lvo_/i, replacement: 'LVO ' },\n  { pattern: /parese$/i, replacement: 'parese / Weakness' },\n  { pattern: /deviation$/i, replacement: 'deviation / Deviation' },\n];\n\n/**\n * Format driver/field names with consistent medical terminology\n * @param {string} fieldName - Technical field name\n * @returns {string} User-friendly medical label\n */\nexport function formatDriverName(fieldName) {\n  if (!fieldName) return '';\n\n  // First try exact match\n  const mapped = FIELD_LABEL_MAP[fieldName.toLowerCase()];\n  if (mapped) return mapped;\n\n  // Apply pattern-based replacements\n  let formatted = fieldName;\n  PATTERN_REPLACEMENTS.forEach(({ pattern, replacement }) => {\n    formatted = formatted.replace(pattern, replacement);\n  });\n\n  // Clean up and format\n  formatted = formatted\n    .replace(/_/g, ' ') // Replace underscores with spaces\n    .replace(/\\b\\w/g, (l) => l.toUpperCase()) // Title case\n    .trim();\n\n  return formatted;\n}\n\n/**\n * Format field labels for summary display\n * @param {string} fieldName - Technical field name\n * @returns {string} User-friendly summary label\n */\nexport function formatSummaryLabel(fieldName) {\n  const friendlyLabel = formatDriverName(fieldName);\n  // Remove units from labels as they're shown in values\n  return friendlyLabel.replace(/\\s*\\([^)]*\\)\\s*/g, '').trim();\n}\n\n/**\n * Format field values for display with appropriate units\n * @param {any} value - Field value\n * @param {string} fieldName - Field name for context\n * @returns {string} Formatted display value\n */\nexport function formatDisplayValue(value, fieldName = '') {\n  if (value === null || value === undefined || value === '') {\n    return '—';\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? '✓ Ja / Yes' : '✗ Nein / No';\n  }\n\n  if (typeof value === 'number') {\n    const lower = fieldName.toLowerCase();\n    // Add units based on field type\n    if (lower.includes('bp') || lower.includes('blood_pressure')) {\n      return `${value} mmHg`;\n    }\n    if (lower.includes('gfap')) {\n      return `${value} pg/mL`;\n    }\n    if (lower.includes('age')) {\n      return `${value} Jahre / years`;\n    }\n    if (lower.includes('score')) {\n      return value.toString();\n    }\n    if (lower.includes('time') || lower.includes('duration')) {\n      return `${value} min`;\n    }\n\n    // Default number formatting\n    return Number.isInteger(value) ? value.toString() : value.toFixed(1);\n  }\n\n  return value.toString();\n}\n","/**\n * Case Listener Service\n * Polls Cloud Function for active cases\n */\nimport { KIOSK_CONFIG } from '../config.js';\nimport {\n  createTimeoutSignal,\n  sleep,\n  validateCaseData,\n  isGPSStale,\n  CONSTANTS,\n} from '../utils.js';\n\nexport class CaseListener {\n  constructor() {\n    this.baseUrl = KIOSK_CONFIG.caseSharingUrl;\n    this.pollInterval = KIOSK_CONFIG.pollInterval;\n    // Don't cache hospitalId - always read from KIOSK_CONFIG for real-time updates\n    this.intervalId = null;\n    this.cases = new Map();\n    this.onUpdate = null;\n    this.onError = null;\n    this.lastFetchTime = null;\n    this.isConnected = false;\n    this.retryCount = 0;\n  }\n\n  /**\n   * Start listening for cases\n   * @param {Function} onUpdateCallback - Called when cases update\n   * @param {Function} onErrorCallback - Called on errors\n   */\n  start(onUpdateCallback, onErrorCallback) {\n    this.onUpdate = onUpdateCallback;\n    this.onError = onErrorCallback;\n\n    // Initial fetch\n    this.fetchCases();\n\n    // Start polling\n    this.intervalId = setInterval(() => {\n      this.fetchCases();\n    }, this.pollInterval);\n\n    console.log('[CaseListener] Started polling every', this.pollInterval, 'ms');\n  }\n\n  /**\n   * Stop listening\n   */\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      console.log('[CaseListener] Stopped polling');\n    }\n  }\n\n  /**\n   * Fetch cases from API with retry logic\n   */\n  async fetchCases() {\n    let lastError = null;\n\n    for (let attempt = 0; attempt <= CONSTANTS.MAX_RETRY_ATTEMPTS; attempt++) {\n      try {\n        const url = this.buildFetchUrl();\n\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json',\n          },\n          signal: createTimeoutSignal(CONSTANTS.FETCH_TIMEOUT_MS),\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n\n        if (!data.success) {\n          throw new Error(data.error || 'Failed to fetch cases');\n        }\n\n        // Success! Reset retry count and update connection status\n        this.retryCount = 0;\n        this.isConnected = true;\n        this.lastFetchTime = new Date();\n\n        // Process cases\n        this.processCases(data.cases || []);\n\n        // Notify listeners\n        if (this.onUpdate) {\n          this.onUpdate({\n            cases: Array.from(this.cases.values()),\n            timestamp: data.timestamp,\n            count: data.count,\n          });\n        }\n\n        return; // Success, exit function\n      } catch (error) {\n        lastError = error;\n        console.error(`[CaseListener] Fetch error (attempt ${attempt + 1}/${CONSTANTS.MAX_RETRY_ATTEMPTS + 1}):`, error);\n\n        // If not the last attempt, wait before retrying\n        if (attempt < CONSTANTS.MAX_RETRY_ATTEMPTS) {\n          const delayMs = CONSTANTS.RETRY_DELAYS_MS[attempt] || 8000;\n          console.log(`[CaseListener] Retrying in ${delayMs}ms...`);\n          await sleep(delayMs);\n        }\n      }\n    }\n\n    // All retries failed\n    console.error('[CaseListener] All retry attempts failed:', lastError);\n    this.isConnected = false;\n    this.retryCount++;\n\n    if (this.onError) {\n      this.onError(lastError);\n    }\n  }\n\n  /**\n   * Build fetch URL with filters\n   */\n  buildFetchUrl() {\n    let url = `${this.baseUrl}/get-cases`;\n\n    const params = new URLSearchParams();\n\n    // Always read from config for latest hospital selection\n    if (KIOSK_CONFIG.hospitalId) {\n      params.append('hospitalId', KIOSK_CONFIG.hospitalId);\n    }\n\n    params.append('status', 'in_transit');\n\n    const queryString = params.toString();\n    if (queryString) {\n      url += `?${queryString}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Process fetched cases with validation and enrichment\n   */\n  processCases(newCases) {\n    const oldCaseIds = new Set(this.cases.keys());\n    const newCaseIds = new Set();\n\n    // Process each case\n    newCases.forEach((caseData) => {\n      // Validate case data\n      if (!validateCaseData(caseData)) {\n        console.warn('[CaseListener] Invalid case data, skipping:', caseData);\n        return;\n      }\n\n      const caseId = caseData.id;\n      newCaseIds.add(caseId);\n\n      const isNew = !this.cases.has(caseId);\n\n      // Calculate GPS staleness\n      const gpsStale = isGPSStale(\n        caseData.tracking?.lastUpdated,\n        KIOSK_CONFIG.staleGpsMinutes\n      );\n\n      // Enrich tracking data\n      const enrichedTracking = {\n        ...(caseData.tracking || {}),\n        gpsStale,\n      };\n\n      // Store case with enriched data\n      this.cases.set(caseId, {\n        ...caseData,\n        tracking: enrichedTracking,\n        isNew, // Flag for new case alert\n        receivedAt: isNew ? new Date() : this.cases.get(caseId).receivedAt,\n      });\n\n      // Log new cases with timestamp info\n      if (isNew) {\n        console.log('[CaseListener] New case:', caseId, this.getCaseSummary(caseData));\n        console.log('[CaseListener] Timestamps:', {\n          createdAt: caseData.createdAt,\n          updatedAt: caseData.updatedAt,\n          receivedAt: caseData.receivedAt,\n          trackingLastUpdated: caseData.tracking?.lastUpdated,\n        });\n      }\n    });\n\n    // Remove cases that are no longer active\n    oldCaseIds.forEach((caseId) => {\n      if (!newCaseIds.has(caseId)) {\n        console.log('[CaseListener] Case removed:', caseId);\n        this.cases.delete(caseId);\n      }\n    });\n  }\n\n  /**\n   * Get case summary for logging\n   */\n  getCaseSummary(caseData) {\n    const ichPercent = Math.round((caseData.results?.ich?.probability || 0) * 100);\n    const eta = caseData.tracking?.duration || '?';\n\n    return {\n      module: caseData.moduleType,\n      ich: `${ichPercent}%`,\n      eta: `${eta} min`,\n      urgency: caseData.urgency,\n    };\n  }\n\n  /**\n   * Get all cases\n   */\n  getCases() {\n    return Array.from(this.cases.values());\n  }\n\n  /**\n   * Get case by ID\n   */\n  getCase(caseId) {\n    return this.cases.get(caseId);\n  }\n\n  /**\n   * Mark case as viewed (clear isNew flag)\n   */\n  markViewed(caseId) {\n    const caseData = this.cases.get(caseId);\n    if (caseData) {\n      caseData.isNew = false;\n      this.cases.set(caseId, caseData);\n    }\n  }\n\n  /**\n   * Get connection status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      lastFetchTime: this.lastFetchTime,\n      caseCount: this.cases.size,\n      isPolling: this.intervalId !== null,\n    };\n  }\n}\n\n// Export singleton\nexport const caseListener = new CaseListener();\n","/**\n * Dashboard UI - Case List View\n */\nimport { URGENCY_CONFIG, KIOSK_CONFIG } from '../config.js';\nimport { getRiskColor, getTimeAgo, formatETA, isCaseStale, getRelevantTimestamp } from '../utils.js';\n\nexport function renderDashboard(cases) {\n  const container = document.getElementById('casesContainer');\n  if (!container) {\n    return;\n  }\n\n  if (!cases || cases.length === 0) {\n    container.innerHTML = `\n      <div class=\"no-cases-state\">\n        <div class=\"no-cases-icon\">✓</div>\n        <h2>Keine aktiven Fälle / No Active Cases</h2>\n        <p>Das System ist aktiv und überwacht eingehende Fälle</p>\n        <p>System is active and monitoring incoming cases</p>\n      </div>\n    `;\n    return;\n  }\n\n  // Sort by urgency and ETA\n  const sortedCases = sortCases(cases);\n\n  // Apply display limit\n  const displayCases = sortedCases.slice(0, KIOSK_CONFIG.maxCasesDisplay);\n\n  // Render case cards\n  const cardsHTML = displayCases.map((caseData) => renderCaseCard(caseData)).join('');\n\n  // Show warning if cases were truncated\n  const truncatedWarning = sortedCases.length > KIOSK_CONFIG.maxCasesDisplay\n    ? `<div class=\"truncated-warning\" role=\"alert\">\n         Showing ${KIOSK_CONFIG.maxCasesDisplay} of ${sortedCases.length} cases\n       </div>`\n    : '';\n\n  container.innerHTML = `\n    ${truncatedWarning}\n    <div class=\"cases-grid\" role=\"list\" aria-label=\"Active cases\">\n      ${cardsHTML}\n    </div>\n  `;\n}\n\n/**\n * Sort cases by urgency and ETA\n */\nfunction sortCases(cases) {\n  return [...cases].sort((a, b) => {\n    const urgencyA = URGENCY_CONFIG[a.urgency]?.priority ?? 10;\n    const urgencyB = URGENCY_CONFIG[b.urgency]?.priority ?? 10;\n\n    if (urgencyA !== urgencyB) {\n      return urgencyA - urgencyB;\n    }\n\n    // Same urgency - sort by ETA\n    const etaA = a.tracking?.duration || 9999;\n    const etaB = b.tracking?.duration || 9999;\n    return etaA - etaB;\n  });\n}\n\n/**\n * Render individual case card\n */\nfunction renderCaseCard(caseData) {\n  const urgencyConfig = URGENCY_CONFIG[caseData.urgency] || URGENCY_CONFIG.STANDARD;\n  const ichPercent = Math.round((caseData.results?.ich?.probability || 0) * 100);\n  const lvoPercent = caseData.results?.lvo ? Math.round(caseData.results.lvo.probability * 100) : null;\n  const formattedETA = formatETA(caseData.tracking?.duration);\n  const distance = caseData.tracking?.distance || '?';\n\n  // Check GPS staleness\n  const isGpsStale = caseData.tracking?.gpsStale || false;\n\n  // Get most relevant timestamp (updatedAt > receivedAt > lastUpdated > createdAt)\n  const relevantTimestamp = getRelevantTimestamp(caseData);\n\n  // Check if case is old/stale\n  const caseIsStale = isCaseStale(relevantTimestamp);\n\n  // Calculate time since received/updated\n  const receivedAgo = getTimeAgo(relevantTimestamp);\n\n  // Create accessible label\n  const ariaLabel = `${caseData.urgency} case, ${caseData.ambulanceId}, ICH risk ${ichPercent}%, ETA ${formattedETA} minutes`;\n\n  return `\n    <div class=\"case-card ${caseData.urgency.toLowerCase()} ${caseData.isNew ? 'new-case' : ''} ${caseIsStale ? 'stale-case' : ''}\"\n         data-case-id=\"${caseData.id}\"\n         style=\"border-color: ${urgencyConfig.color}\"\n         role=\"listitem\"\n         tabindex=\"0\"\n         aria-label=\"${ariaLabel}\">\n\n      <div class=\"case-header\">\n        <div class=\"urgency-badge\" style=\"background: ${urgencyConfig.color}\">\n          ${urgencyConfig.icon} ${caseData.urgency}\n        </div>\n        <div class=\"case-meta\">\n          <span class=\"ambulance-id\">${caseData.ambulanceId}</span>\n          <span class=\"module-type\">${caseData.moduleType}</span>\n        </div>\n      </div>\n\n      <div class=\"case-risks\">\n        <div class=\"risk-circle-container\">\n          <div class=\"risk-circle ${ichPercent > 70 ? 'critical' : ichPercent > 50 ? 'high' : 'medium'}\"\n               style=\"background: conic-gradient(${getRiskColor(ichPercent)} ${ichPercent}%, rgba(255,255,255,0.1) 0%)\">\n            <div class=\"risk-value\">${ichPercent}%</div>\n          </div>\n          <div class=\"risk-label\">ICH</div>\n        </div>\n\n        ${lvoPercent !== null ? `\n          <div class=\"risk-circle-container\">\n            <div class=\"risk-circle ${lvoPercent > 50 ? 'high' : 'medium'}\"\n                 style=\"background: conic-gradient(${getRiskColor(lvoPercent)} ${lvoPercent}%, rgba(255,255,255,0.1) 0%)\">\n              <div class=\"risk-value\">${lvoPercent}%</div>\n            </div>\n            <div class=\"risk-label\">LVO</div>\n          </div>\n        ` : ''}\n      </div>\n\n      <div class=\"case-eta\">\n        <div class=\"eta-main ${isGpsStale ? 'stale' : ''}\">\n          <span class=\"eta-value\">${formattedETA}</span>\n          <span class=\"eta-unit\">${formattedETA === 'Arrived' || formattedETA === '?' ? '' : 'min'}</span>\n        </div>\n        <div class=\"eta-details\">\n          <span class=\"distance\">${typeof distance === 'number' ? distance.toFixed(1) : distance} km</span>\n          ${isGpsStale ? '<span class=\"gps-stale-warning\" role=\"alert\">⚠️ GPS stale</span>' : ''}\n        </div>\n      </div>\n\n      <div class=\"case-footer\">\n        <span class=\"case-time\">${receivedAgo}</span>\n        <span class=\"view-details\">View Details →</span>\n      </div>\n    </div>\n  `;\n}\n\n","/**\n * Case Detail Modal\n * Shows full assessment results for a case\n * Enhanced with PWA-style beautiful results display\n */\nimport {\n  getRiskColor,\n  getRiskLevel,\n  formatTime,\n  formatLabel,\n  formatDriverName,\n  formatSummaryLabel,\n  formatDisplayValue\n} from '../utils.js';\n\n/**\n * Get risk level classification for styling\n * @param {number} percent - Risk percentage (0-100)\n * @returns {string} Risk level ('critical', 'high', 'normal')\n */\nfunction getRiskLevelClass(percent) {\n  if (percent > 70) return 'critical';\n  if (percent > 50) return 'high';\n  return 'normal';\n}\n\nexport function showCaseDetail(caseData) {\n  const modal = document.getElementById('caseDetailModal');\n  if (!modal) {\n    return;\n  }\n\n  const modalContent = modal.querySelector('.modal-content');\n  if (!modalContent) {\n    return;\n  }\n\n  // Render detail view\n  modalContent.innerHTML = renderDetailView(caseData);\n\n  // Show modal\n  modal.style.display = 'flex';\n}\n\nfunction renderDetailView(caseData) {\n  const { results, formData, moduleType, ambulanceId, tracking, urgency, createdAt, updatedAt } = caseData;\n\n  // Calculate risk percentages\n  const ichPercent = Math.round((results?.ich?.probability || 0) * 100);\n  const lvoPercent = results?.lvo ? Math.round(results.lvo.probability * 100) : null;\n\n  // Determine risk levels for styling\n  const ichLevel = getRiskLevelClass(ichPercent);\n  const lvoLevel = lvoPercent ? getRiskLevelClass(lvoPercent) : 'normal';\n\n  // Determine card layout (single, dual, or triple)\n  let cardCount = 1; // Always have ICH\n  if (lvoPercent !== null && lvoPercent > 0) {\n    cardCount++;\n  }\n\n  const layoutClass = cardCount === 1 ? 'risk-results-single' : 'risk-results-dual';\n\n  return `\n    <div class=\"case-detail-container\">\n      <div class=\"detail-header\">\n        <div class=\"header-left\">\n          <h2 id=\"modalTitle\">🩺 Detaillierte Fallanalyse / Case Details</h2>\n          <div class=\"case-badges\">\n            <span class=\"badge urgency-badge\" style=\"background: ${getUrgencyColor(urgency)}\">${urgency}</span>\n            <span class=\"badge module-badge\">${moduleType}</span>\n            <span class=\"badge ambulance-badge\">🚑 ${ambulanceId}</span>\n          </div>\n        </div>\n        <button class=\"close-modal\" aria-label=\"Close modal\">✕</button>\n      </div>\n\n      <div class=\"detail-content\">\n        <!-- Enhanced Risk Assessment Cards -->\n        <div class=\"content-section\">\n          <h3>🎯 Risikobewertung / Risk Assessment</h3>\n          <div class=\"${layoutClass}\">\n            ${renderEnhancedRiskCard('ich', ichPercent, ichLevel, results, formData)}\n            ${lvoPercent !== null ? renderEnhancedRiskCard('lvo', lvoPercent, lvoLevel, results, formData) : ''}\n          </div>\n        </div>\n\n        <!-- Entscheidungshilfe Speedometer (shown if meaningful signal) -->\n        ${renderEntscheidungshilfe(ichPercent, lvoPercent)}\n\n        <!-- Enhanced Drivers Section -->\n        ${renderEnhancedDriversSection(results)}\n\n        <!-- Tracking Information -->\n        <div class=\"content-section\">\n          <h3>📍 Standort & Ankunftszeit / Tracking Information</h3>\n          <div class=\"tracking-grid\">\n            <div class=\"tracking-item\">\n              <div class=\"tracking-label\">ETA</div>\n              <div class=\"tracking-value\">${tracking?.duration || '?'} min</div>\n            </div>\n            <div class=\"tracking-item\">\n              <div class=\"tracking-label\">Entfernung / Distance</div>\n              <div class=\"tracking-value\">${tracking?.distance ? tracking.distance.toFixed(1) : '?'} km</div>\n            </div>\n            <div class=\"tracking-item\">\n              <div class=\"tracking-label\">Letzte Aktualisierung / Last Update</div>\n              <div class=\"tracking-value\">${tracking?.lastUpdated ? formatTime(tracking.lastUpdated) : 'Unknown'}</div>\n            </div>\n            <div class=\"tracking-item\">\n              <div class=\"tracking-label\">Voraussichtliche Ankunft / Estimated Arrival</div>\n              <div class=\"tracking-value\">${tracking?.estimatedArrival ? formatTime(tracking.estimatedArrival) : 'Unknown'}</div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Assessment Data -->\n        <div class=\"content-section\">\n          <h3>📋 Bewertungsdaten / Assessment Data</h3>\n          <div class=\"data-table\">\n            ${renderFormData(formData)}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"detail-footer\">\n        <div class=\"footer-meta\">\n          <span class=\"timestamp\">Empfangen / Received: ${formatTime(createdAt || new Date())}</span>\n        </div>\n        <button class=\"close-modal secondary-button\">Schließen / Close</button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render enhanced risk card with circular SVG progress ring (PWA style)\n * @param {string} type - Risk type ('ich' or 'lvo')\n * @param {number} percent - Risk percentage (0-100)\n * @param {string} level - Risk level ('critical', 'high', 'normal')\n * @param {object} results - Full results object\n * @param {object} formData - Form data (for GFAP volume calculation)\n * @returns {string} HTML for enhanced risk card\n */\nfunction renderEnhancedRiskCard(type, percent, level, results, formData = null) {\n  const icons = { ich: '🩸', lvo: '🧠' };\n  const titles = {\n    ich: 'ICH Risiko / ICH Risk',\n    lvo: 'LVO Risiko / LVO Risk'\n  };\n\n  const color = level === 'critical' ? '#ff4444' : level === 'high' ? '#ff8800' : '#0066cc';\n  const riskLevelText = getRiskLevel(percent);\n\n  // SVG circle progress\n  const circumference = Math.PI * 100; // For radius 50\n  const offset = circumference * (1 - percent / 100);\n\n  // For ICH cards, try to add volume ring if GFAP data available\n  const volumeRingHtml = type === 'ich' && formData ? renderICHVolumeRing(formData) : '';\n\n  return `\n    <div class=\"enhanced-risk-card ${type} ${level}\">\n      <div class=\"risk-header\">\n        <div class=\"risk-icon\">${icons[type]}</div>\n        <div class=\"risk-title\">\n          <h3>${titles[type]}</h3>\n          <span class=\"risk-module\">${type === 'ich' ? 'Blutungsrisiko' : 'Verschlussrisiko'}</span>\n        </div>\n      </div>\n\n      <div class=\"risk-probability\">\n        <div class=\"circles-container\">\n          <div class=\"rings-row\">\n            <div class=\"circle-item\">\n              <div class=\"probability-circle\">\n                <svg viewBox=\"0 0 120 120\" width=\"120\" height=\"120\">\n                  <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"rgba(255,255,255,0.15)\" stroke-width=\"8\"/>\n                  <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\"\n                    stroke=\"${color}\"\n                    stroke-width=\"10\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${offset}\"\n                    stroke-linecap=\"round\"\n                    transform=\"rotate(-90 60 60)\"\n                    class=\"probability-progress\"/>\n                  <text x=\"60\" y=\"70\"\n                    text-anchor=\"middle\"\n                    font-family=\"system-ui, -apple-system, sans-serif\"\n                    font-size=\"32\"\n                    font-weight=\"bold\"\n                    fill=\"#ffffff\">\n                    ${percent}%\n                  </text>\n                </svg>\n              </div>\n              <div class=\"circle-label\">${type.toUpperCase()} Wahrscheinlichkeit</div>\n            </div>\n            ${volumeRingHtml}\n          </div>\n          <div class=\"risk-level ${level}\">${riskLevelText}</div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render enhanced drivers section with split-view layout (PWA style)\n * @param {object} results - Results object containing drivers\n * @returns {string} HTML for drivers section\n */\nfunction renderEnhancedDriversSection(results) {\n  if (!results?.ich?.drivers && !results?.lvo?.drivers) {\n    return '';\n  }\n\n  let html = `\n    <div class=\"content-section\">\n      <h3>🎯 Risikofaktoren / Risk Factors</h3>\n      <div class=\"enhanced-drivers-grid\">\n  `;\n\n  // Render ICH drivers if available\n  if (results?.ich?.drivers) {\n    html += renderEnhancedDriversPanel(results.ich.drivers, 'ICH', 'ich', results.ich.probability);\n  }\n\n  // Render LVO drivers if available\n  if (results?.lvo?.drivers && results.lvo.probability > 0) {\n    html += renderEnhancedDriversPanel(results.lvo.drivers, 'LVO', 'lvo', results.lvo.probability);\n  }\n\n  html += `\n      </div>\n    </div>\n  `;\n\n  return html;\n}\n\n/**\n * Render enhanced drivers panel with split-view (PWA style)\n * @param {object} drivers - Drivers data with positive/negative arrays\n * @param {string} title - Panel title\n * @param {string} type - Type ('ich' or 'lvo')\n * @param {number} probability - Risk probability (0-1)\n * @returns {string} HTML for drivers panel\n */\nfunction renderEnhancedDriversPanel(drivers, title, type, probability) {\n  if (!drivers || (!drivers.positive && !drivers.negative)) {\n    return '';\n  }\n\n  const positiveDrivers = (drivers.positive || []).slice(0, 5);\n  const negativeDrivers = (drivers.negative || []).slice(0, 5);\n\n  // Calculate max weight for bar sizing\n  const allWeights = [...positiveDrivers, ...negativeDrivers].map(d => Math.abs(d.weight));\n  const maxWeight = Math.max(...allWeights, 0.01);\n\n  // Calculate relative importance percentages\n  const totalPositiveWeight = positiveDrivers.reduce((sum, d) => sum + Math.abs(d.weight), 0);\n  const totalNegativeWeight = negativeDrivers.reduce((sum, d) => sum + Math.abs(d.weight), 0);\n\n  return `\n    <div class=\"enhanced-drivers-panel ${type}\">\n      <div class=\"panel-header\">\n        <div class=\"panel-icon ${type}\">${type === 'ich' ? '🩸' : '🧠'}</div>\n        <div class=\"panel-title\">\n          <h4>${title} Faktoren / Factors</h4>\n          <span class=\"panel-subtitle\">Beitrag zum Gesamtrisiko / Contributing to overall risk</span>\n        </div>\n      </div>\n\n      <div class=\"drivers-split-view\">\n        <div class=\"drivers-column positive-column\">\n          <div class=\"column-header\">\n            <span class=\"column-icon\">⬆</span>\n            <span class=\"column-title\">Risiko erhöhend / Increasing Risk</span>\n          </div>\n          <div class=\"compact-drivers\">\n            ${positiveDrivers.length > 0\n              ? positiveDrivers.map(d => {\n                  const relativeImportance = totalPositiveWeight > 0\n                    ? (Math.abs(d.weight) / totalPositiveWeight) * 100 : 0;\n                  const barWidth = (Math.abs(d.weight) / maxWeight) * 100;\n                  return renderCompactDriver(d, 'positive', relativeImportance, barWidth);\n                }).join('')\n              : '<div class=\"no-factors\">Keine Faktoren / No factors</div>'\n            }\n          </div>\n        </div>\n\n        <div class=\"drivers-column negative-column\">\n          <div class=\"column-header\">\n            <span class=\"column-icon\">⬇</span>\n            <span class=\"column-title\">Risiko mindernd / Decreasing Risk</span>\n          </div>\n          <div class=\"compact-drivers\">\n            ${negativeDrivers.length > 0\n              ? negativeDrivers.map(d => {\n                  const relativeImportance = totalNegativeWeight > 0\n                    ? (Math.abs(d.weight) / totalNegativeWeight) * 100 : 0;\n                  const barWidth = (Math.abs(d.weight) / maxWeight) * 100;\n                  return renderCompactDriver(d, 'negative', relativeImportance, barWidth);\n                }).join('')\n              : '<div class=\"no-factors\">Keine Faktoren / No factors</div>'\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Render compact driver item with animated bar\n * @param {object} driver - Driver object with label and weight\n * @param {string} type - Type ('positive' or 'negative')\n * @param {number} relativeImportance - Percentage of total contribution\n * @param {number} barWidth - Bar width percentage\n * @returns {string} HTML for driver item\n */\nfunction renderCompactDriver(driver, type, relativeImportance, barWidth) {\n  // Use medical terminology formatter for better labels\n  const cleanLabel = formatDriverName(driver.label);\n\n  return `\n    <div class=\"compact-driver-item\">\n      <div class=\"compact-driver-label\">${cleanLabel}</div>\n      <div class=\"compact-driver-bar ${type}\" style=\"width: ${barWidth}%\">\n        <span class=\"compact-driver-value\">${type === 'positive' ? '+' : '-'}${relativeImportance.toFixed(0)}%</span>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Get urgency color\n * @param {string} urgency - Urgency level\n * @returns {string} Hex color\n */\nfunction getUrgencyColor(urgency) {\n  const colors = {\n    IMMEDIATE: '#ff4444',\n    TIME_CRITICAL: '#ff8800',\n    URGENT: '#ffcc00',\n    STANDARD: '#4a90e2',\n  };\n  return colors[urgency] || '#4a90e2';\n}\n\n\n/**\n * Render enhanced input summary matching PWA style\n * @param {object} formData - Form data from case\n * @returns {string} HTML for enhanced input summary\n */\nfunction renderFormData(formData) {\n  if (!formData || Object.keys(formData).length === 0) {\n    return '<p class=\"no-data\">Keine Bewertungsdaten verfügbar / No assessment data available</p>';\n  }\n\n  // Check if formData is structured by modules or flat\n  const isModularData = typeof Object.values(formData)[0] === 'object'\n    && !Array.isArray(Object.values(formData)[0])\n    && Object.values(formData)[0] !== null;\n\n  if (isModularData) {\n    // Render modular data (grouped by assessment module)\n    return renderModularInputSummary(formData);\n  }\n\n  // Render flat data\n  return renderFlatInputSummary(formData);\n}\n\n/**\n * Render modular input summary grouped by assessment modules\n * @param {object} formData - Modular form data\n * @returns {string} HTML for modular summary\n */\nfunction renderModularInputSummary(formData) {\n  let summaryHtml = '';\n\n  Object.entries(formData).forEach(([module, data]) => {\n    if (data && typeof data === 'object' && Object.keys(data).length > 0) {\n      const moduleTitle = module.charAt(0).toUpperCase() + module.slice(1) + ' Modul / Module';\n      let itemsHtml = '';\n\n      Object.entries(data).forEach(([key, value]) => {\n        // Skip empty values\n        if (value === '' || value === null || value === undefined) {\n          return;\n        }\n\n        const label = formatSummaryLabel(key);\n        const displayValue = formatDisplayValue(value, key);\n\n        itemsHtml += `\n          <div class=\"summary-item\">\n            <span class=\"summary-label\">${label}:</span>\n            <span class=\"summary-value\">${displayValue}</span>\n          </div>\n        `;\n      });\n\n      if (itemsHtml) {\n        summaryHtml += `\n          <div class=\"summary-module\">\n            <h4 class=\"module-title\">${moduleTitle}</h4>\n            <div class=\"summary-items\">\n              ${itemsHtml}\n            </div>\n          </div>\n        `;\n      }\n    }\n  });\n\n  return summaryHtml || '<p class=\"no-data\">Keine Bewertungsdaten verfügbar / No assessment data available</p>';\n}\n\n/**\n * Render flat input summary\n * @param {object} formData - Flat form data\n * @returns {string} HTML for flat summary\n */\nfunction renderFlatInputSummary(formData) {\n  let itemsHtml = '';\n\n  Object.entries(formData).forEach(([key, value]) => {\n    // Skip empty values and internal fields\n    if (value === '' || value === null || value === undefined || key.startsWith('_')) {\n      return;\n    }\n\n    const label = formatSummaryLabel(key);\n    const displayValue = formatDisplayValue(value, key);\n\n    itemsHtml += `\n      <div class=\"summary-item\">\n        <span class=\"summary-label\">${label}:</span>\n        <span class=\"summary-value\">${displayValue}</span>\n      </div>\n    `;\n  });\n\n  if (!itemsHtml) {\n    return '<p class=\"no-data\">Keine Bewertungsdaten verfügbar / No assessment data available</p>';\n  }\n\n  return `\n    <div class=\"summary-module\">\n      <div class=\"summary-items\">\n        ${itemsHtml}\n      </div>\n    </div>\n  `;\n}\n\nfunction renderDrivers(drivers) {\n  if (!drivers || (!drivers.positive && !drivers.negative)) {\n    return '<p>No driver data available</p>';\n  }\n\n  const positive = drivers.positive || [];\n  const negative = drivers.negative || [];\n\n  return `\n    <div class=\"drivers-container\">\n      <div class=\"drivers-column\">\n        <h4>⬆ Increasing Risk</h4>\n        ${positive.length > 0\n      ? positive\n        .map(\n          (d) => `\n              <div class=\"driver-item positive\">\n                <span class=\"driver-label\">${formatLabel(d.label)}</span>\n                <span class=\"driver-value\">${(Math.abs(d.weight) * 100).toFixed(1)}%</span>\n              </div>\n            `,\n        )\n        .join('')\n      : '<p class=\"no-drivers\">None</p>'\n    }\n      </div>\n\n      <div class=\"drivers-column\">\n        <h4>⬇ Decreasing Risk</h4>\n        ${negative.length > 0\n      ? negative\n        .map(\n          (d) => `\n              <div class=\"driver-item negative\">\n                <span class=\"driver-label\">${formatLabel(d.label)}</span>\n                <span class=\"driver-value\">${(Math.abs(d.weight) * 100).toFixed(1)}%</span>\n              </div>\n            `,\n        )\n        .join('')\n      : '<p class=\"no-drivers\">None</p>'\n    }\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Extract GFAP value from form data\n * @param {object} formData - Form data from case\n * @returns {number} GFAP value or 0\n */\nfunction getGFAPValue(formData) {\n  if (!formData) return 0;\n\n  // Check if modular data (coma, limited, full modules)\n  for (const module of ['coma', 'limited', 'full']) {\n    if (formData[module]?.gfap_value) {\n      return parseFloat(formData[module].gfap_value);\n    }\n    if (formData[module]?.gfap) {\n      return parseFloat(formData[module].gfap);\n    }\n  }\n\n  // Check flat data\n  if (formData.gfap_value) return parseFloat(formData.gfap_value);\n  if (formData.gfap) return parseFloat(formData.gfap);\n\n  return 0;\n}\n\n/**\n * Estimate ICH volume from GFAP value (simplified from PWA logic)\n * @param {number} gfapValue - GFAP value in pg/mL\n * @returns {number} Estimated ICH volume in ml\n */\nfunction estimateICHVolume(gfapValue) {\n  if (!gfapValue || gfapValue <= 0) return 0;\n\n  // Simplified logarithmic relationship from PWA\n  // GFAP values typically range from 10-10000+ pg/mL\n  // ICH volumes typically range from <1ml to 100ml+\n  const logGFAP = Math.log10(gfapValue);\n  const estimatedVolume = Math.pow(10, (logGFAP - 1.5) * 1.2);\n\n  return Math.max(0, Math.min(150, estimatedVolume)); // Cap at 150ml\n}\n\n/**\n * Get volume color based on severity\n * @param {number} volume - ICH volume in ml\n * @returns {string} Hex color\n */\nfunction getVolumeColor(volume) {\n  if (volume >= 30) return '#ff4444'; // Critical (high mortality)\n  if (volume >= 15) return '#ff8800'; // High risk\n  if (volume >= 5) return '#ffcc00';  // Moderate\n  return '#0066cc'; // Low volume\n}\n\n/**\n * Render ICH volume ring if GFAP data is available\n * @param {object} formData - Form data containing GFAP\n * @returns {string} HTML for volume ring or empty string\n */\nfunction renderICHVolumeRing(formData) {\n  const gfapValue = getGFAPValue(formData);\n  if (!gfapValue || gfapValue <= 0) return '';\n\n  const estimatedVolume = estimateICHVolume(gfapValue);\n  const volumeColor = getVolumeColor(estimatedVolume);\n\n  // Calculate progress ring (max 100ml = 100%)\n  const volumePercent = Math.min((estimatedVolume / 100) * 100, 100);\n  const circumference = Math.PI * 100;\n  const offset = circumference * (1 - volumePercent / 100);\n\n  const volumeDisplay = estimatedVolume < 1 ? '<1' : estimatedVolume.toFixed(1);\n\n  return `\n    <div class=\"circle-item\">\n      <div class=\"probability-circle\">\n        <svg viewBox=\"0 0 120 120\" width=\"120\" height=\"120\">\n          <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\" stroke=\"rgba(255,255,255,0.15)\" stroke-width=\"8\"/>\n          <circle cx=\"60\" cy=\"60\" r=\"50\" fill=\"none\"\n            stroke=\"${volumeColor}\"\n            stroke-width=\"10\"\n            stroke-dasharray=\"${circumference}\"\n            stroke-dashoffset=\"${offset}\"\n            stroke-linecap=\"round\"\n            transform=\"rotate(-90 60 60)\"\n            class=\"probability-progress volume-ring\"/>\n          <text x=\"60\" y=\"60\"\n            text-anchor=\"middle\"\n            font-family=\"system-ui, -apple-system, sans-serif\"\n            font-size=\"24\"\n            font-weight=\"bold\"\n            fill=\"#ffffff\">\n            ${volumeDisplay}\n          </text>\n          <text x=\"60\" y=\"78\"\n            text-anchor=\"middle\"\n            font-family=\"system-ui, -apple-system, sans-serif\"\n            font-size=\"14\"\n            fill=\"rgba(255,255,255,0.7)\">\n            ml\n          </text>\n        </svg>\n      </div>\n      <div class=\"circle-label\">Blutungsvolumen / Bleed Volume</div>\n      <div class=\"volume-note\">Geschätzt von GFAP / Estimated from GFAP</div>\n    </div>\n  `;\n}\n\n/**\n * Render Entscheidungshilfe speedometer for LVO/ICH decision support\n * @param {number} ichPercent - ICH probability percentage\n * @param {number} lvoPercent - LVO probability percentage\n * @returns {string} HTML for speedometer or empty string\n */\nfunction renderEntscheidungshilfe(ichPercent, lvoPercent) {\n  // Only show if both probabilities are significant\n  if (!lvoPercent || lvoPercent < 20 || ichPercent < 20) return '';\n\n  const ratio = lvoPercent / Math.max(ichPercent, 1);\n  const absDiff = Math.abs(lvoPercent - ichPercent);\n\n  // Only show if there's a meaningful signal (difference > 15%)\n  if (absDiff < 15) return '';\n\n  // Calculate needle position (-90 to +90 degrees)\n  // Ratio < 0.8 = ICH dominant, > 1.2 = LVO dominant, between = uncertain\n  let needleAngle = 0;\n  if (ratio < 0.5) needleAngle = -75; // Strong ICH\n  else if (ratio < 0.8) needleAngle = -45; // Moderate ICH\n  else if (ratio < 1.2) needleAngle = 0; // Uncertain\n  else if (ratio < 2.0) needleAngle = 45; // Moderate LVO\n  else needleAngle = 75; // Strong LVO\n\n  const recommendation = ratio < 0.8\n    ? 'ICH wahrscheinlicher / ICH more likely'\n    : ratio > 1.2\n      ? 'LVO wahrscheinlicher / LVO more likely'\n      : 'Unsicher - beide möglich / Uncertain - both possible';\n\n  const confidence = absDiff > 30 ? 'Hoch / High' : absDiff > 20 ? 'Mittel / Medium' : 'Niedrig / Low';\n\n  return `\n    <div class=\"content-section entscheidungshilfe-section\">\n      <h3>🎯 Entscheidungshilfe / Decision Support</h3>\n      <div class=\"speedometer-card\">\n        <div class=\"speedometer-gauge\">\n          <svg viewBox=\"0 0 200 120\" width=\"300\" height=\"180\">\n            <!-- Arc background -->\n            <path d=\"M 30 100 A 70 70 0 0 1 170 100\" fill=\"none\" stroke=\"rgba(255,255,255,0.1)\" stroke-width=\"20\" stroke-linecap=\"round\"/>\n\n            <!-- ICH zone (red) -->\n            <path d=\"M 30 100 A 70 70 0 0 1 80 45\" fill=\"none\" stroke=\"#ff4444\" stroke-width=\"20\" stroke-linecap=\"round\" opacity=\"0.6\"/>\n\n            <!-- Uncertain zone (yellow) -->\n            <path d=\"M 80 45 A 70 70 0 0 1 120 45\" fill=\"none\" stroke=\"#ffcc00\" stroke-width=\"20\" stroke-linecap=\"round\" opacity=\"0.6\"/>\n\n            <!-- LVO zone (blue) -->\n            <path d=\"M 120 45 A 70 70 0 0 1 170 100\" fill=\"none\" stroke=\"#0066cc\" stroke-width=\"20\" stroke-linecap=\"round\" opacity=\"0.6\"/>\n\n            <!-- Needle -->\n            <line x1=\"100\" y1=\"100\" x2=\"100\" y2=\"40\"\n                  stroke=\"#ffffff\" stroke-width=\"3\" stroke-linecap=\"round\"\n                  transform=\"rotate(${needleAngle} 100 100)\"/>\n            <circle cx=\"100\" cy=\"100\" r=\"6\" fill=\"#ffffff\"/>\n\n            <!-- Labels -->\n            <text x=\"40\" y=\"115\" font-size=\"12\" fill=\"#ff4444\" font-weight=\"bold\">ICH</text>\n            <text x=\"150\" y=\"115\" font-size=\"12\" fill=\"#0066cc\" font-weight=\"bold\">LVO</text>\n          </svg>\n        </div>\n\n        <div class=\"speedometer-info\">\n          <div class=\"recommendation\">${recommendation}</div>\n          <div class=\"speedometer-metrics\">\n            <div class=\"metric\">\n              <span class=\"metric-label\">LVO/ICH Verhältnis / Ratio:</span>\n              <span class=\"metric-value\">${ratio.toFixed(2)}</span>\n            </div>\n            <div class=\"metric\">\n              <span class=\"metric-label\">Differenz / Difference:</span>\n              <span class=\"metric-value\">${absDiff.toFixed(0)}%</span>\n            </div>\n            <div class=\"metric\">\n              <span class=\"metric-label\">Konfidenz / Confidence:</span>\n              <span class=\"metric-value\">${confidence}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n","/**\n * Kiosk Main Application\n * Entry point for Notaufnahme kiosk display\n */\nimport './styles.css';\nimport { KIOSK_CONFIG } from './config.js';\nimport { caseListener } from './services/case-listener.js';\nimport { renderDashboard } from './ui/dashboard.js';\nimport { showCaseDetail } from './ui/case-detail.js';\nimport { CONSTANTS } from './utils.js';\n\n// Application state\nlet currentCases = [];\nlet audioContext = null;\nlet clockIntervalId = null;\nlet isFirstLoad = true;\n\n/**\n * Initialize kiosk application\n */\nasync function initializeKiosk() {\n  console.log('[Kiosk] Initializing...', KIOSK_CONFIG);\n\n  // Initialize hospital selector\n  initializeHospitalSelector();\n\n  // Start clock\n  updateClock();\n  clockIntervalId = setInterval(updateClock, 1000);\n\n  // Initialize audio if enabled\n  if (KIOSK_CONFIG.playAudioAlert) {\n    initializeAudio();\n  }\n\n  // Start case listener\n  caseListener.start(\n    (data) => handleCaseUpdate(data),\n    (error) => handleError(error),\n  );\n\n  // Add event listeners\n  attachEventListeners();\n\n  // Add cleanup on page unload\n  window.addEventListener('beforeunload', cleanup);\n\n  console.log('[Kiosk] Initialized successfully');\n}\n\n/**\n * Cleanup resources before page unload\n */\nfunction cleanup() {\n  console.log('[Kiosk] Cleaning up resources...');\n\n  // Stop polling\n  caseListener.stop();\n\n  // Clear clock interval\n  if (clockIntervalId) {\n    clearInterval(clockIntervalId);\n    clockIntervalId = null;\n  }\n\n  // Close audio context\n  if (audioContext && audioContext.state !== 'closed') {\n    audioContext.close().catch((err) => {\n      console.warn('[Kiosk] Error closing audio context:', err);\n    });\n  }\n}\n\n/**\n * Handle case updates\n */\nfunction handleCaseUpdate(data) {\n  const previousCount = currentCases.length;\n  currentCases = data.cases || [];\n\n  console.log('[Kiosk] Cases updated:', {\n    count: currentCases.length,\n    previous: previousCount,\n  });\n\n  // Update UI\n  renderDashboard(currentCases);\n  updateHeader(data);\n\n  // Check for new cases (skip alert on first load)\n  const newCases = currentCases.filter((c) => c.isNew);\n  if (newCases.length > 0 && !isFirstLoad) {\n    // Show alert for new cases\n    playNewCaseAlert();\n    flashScreen();\n\n    // Mark as viewed after showing alert\n    setTimeout(() => {\n      newCases.forEach((c) => caseListener.markViewed(c.id));\n    }, CONSTANTS.NEW_CASE_VIEWED_DELAY_MS);\n  }\n\n  // Mark first load complete\n  if (isFirstLoad) {\n    isFirstLoad = false;\n  }\n\n  // Update connection status\n  updateConnectionStatus(true);\n}\n\n/**\n * Handle errors\n */\nfunction handleError(error) {\n  console.error('[Kiosk] Error:', error);\n  updateConnectionStatus(false);\n\n  // Show error in UI if no cases\n  if (currentCases.length === 0) {\n    const container = document.getElementById('casesContainer');\n    if (container) {\n      container.innerHTML = `\n        <div class=\"error-state\">\n          <div class=\"error-icon\">⚠️</div>\n          <h2>Verbindungsfehler / Connection Error</h2>\n          <p>${error.message || 'Unable to connect to case monitoring system'}</p>\n          <p class=\"error-hint\">Checking again in ${KIOSK_CONFIG.pollInterval / 1000} seconds...</p>\n        </div>\n      `;\n    }\n  }\n}\n\n/**\n * Initialize hospital selector\n */\nfunction initializeHospitalSelector() {\n  // Import available hospitals and setHospital function\n  const selector = document.getElementById('hospitalSelector');\n  if (!selector) return;\n\n  // Dynamically import hospitals list\n  import('./config.js').then(({ AVAILABLE_HOSPITALS, setHospital }) => {\n    // Populate selector\n    selector.innerHTML = AVAILABLE_HOSPITALS.map(h => {\n      // Check if this option should be selected\n      const isSelected = (h.id === 'ALL' && KIOSK_CONFIG.hospitalId === null) ||\n                         (h.id === KIOSK_CONFIG.hospitalId);\n      return `<option value=\"${h.id}\" ${isSelected ? 'selected' : ''}>${h.name}</option>`;\n    }).join('');\n\n    // Handle selection changes\n    selector.addEventListener('change', (e) => {\n      const hospitalId = e.target.value;\n      if (confirm(`Switch to ${e.target.options[e.target.selectedIndex].text}?\\n\\nThis will reload the page.`)) {\n        setHospital(hospitalId);\n      } else {\n        // Restore previous selection\n        selector.value = KIOSK_CONFIG.hospitalId === null ? 'ALL' : KIOSK_CONFIG.hospitalId;\n      }\n    });\n  });\n}\n\n/**\n * Update header information\n */\nfunction updateHeader(data) {\n  // Update case count\n  const countBadge = document.getElementById('caseCount');\n  if (countBadge) {\n    const count = data.count || 0;\n    countBadge.textContent = `${count} ${count === 1 ? 'Case' : 'Cases'}`;\n    countBadge.className = `case-count-badge ${count > 0 ? 'has-cases' : ''}`;\n  }\n}\n\n/**\n * Update connection status indicator\n */\nfunction updateConnectionStatus(connected) {\n  const status = document.getElementById('connectionStatus');\n  if (status) {\n    status.className = `status-indicator ${connected ? 'connected' : 'disconnected'}`;\n    status.title = connected ? 'Connected' : 'Disconnected';\n    status.setAttribute('aria-label', `Connection status: ${connected ? 'connected' : 'disconnected'}`);\n  }\n}\n\n/**\n * Update clock\n */\nfunction updateClock() {\n  const clockElement = document.getElementById('currentTime');\n  if (clockElement) {\n    const now = new Date();\n    clockElement.textContent = now.toLocaleTimeString('de-DE', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n  }\n}\n\n/**\n * Initialize audio context\n */\nfunction initializeAudio() {\n  // Create audio context on first user interaction\n  document.addEventListener(\n    'click',\n    () => {\n      if (!audioContext) {\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        console.log('[Kiosk] Audio initialized');\n      }\n    },\n    { once: true },\n  );\n}\n\n/**\n * Play new case alert with audio context resume\n */\nasync function playNewCaseAlert() {\n  if (!KIOSK_CONFIG.playAudioAlert || !audioContext) {\n    return;\n  }\n\n  try {\n    // Resume audio context if suspended (browser throttling)\n    if (audioContext.state === 'suspended') {\n      await audioContext.resume();\n      console.log('[Kiosk] Audio context resumed');\n    }\n\n    // Generate alert beep\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n\n    oscillator.frequency.value = CONSTANTS.ALERT_BEEP_FREQUENCY_HZ;\n    oscillator.type = 'sine';\n\n    gainNode.gain.setValueAtTime(CONSTANTS.ALERT_BEEP_VOLUME, audioContext.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(\n      0.01,\n      audioContext.currentTime + CONSTANTS.ALERT_BEEP_DURATION_SEC\n    );\n\n    oscillator.start(audioContext.currentTime);\n    oscillator.stop(audioContext.currentTime + CONSTANTS.ALERT_BEEP_DURATION_SEC);\n\n    console.log('[Kiosk] Alert sound played');\n  } catch (error) {\n    console.warn('[Kiosk] Audio playback failed:', error);\n  }\n}\n\n/**\n * Flash screen for new case\n */\nfunction flashScreen() {\n  document.body.classList.add('flash-alert');\n\n  setTimeout(() => {\n    document.body.classList.remove('flash-alert');\n  }, 1000);\n}\n\n/**\n * Attach event listeners\n */\nfunction attachEventListeners() {\n  // Click on case card to show details\n  document.addEventListener('click', (e) => {\n    const caseCard = e.target.closest('.case-card');\n    if (caseCard) {\n      const caseId = caseCard.dataset.caseId;\n      if (caseId) {\n        const caseData = caseListener.getCase(caseId);\n        if (caseData) {\n          showCaseDetail(caseData);\n          caseListener.markViewed(caseId);\n        }\n      }\n    }\n\n    // Close modal\n    if (e.target.classList.contains('modal-overlay') || e.target.classList.contains('close-modal')) {\n      closeModal();\n    }\n  });\n\n  // Keyboard navigation\n  document.addEventListener('keydown', (e) => {\n    // ESC key to close modal\n    if (e.key === 'Escape') {\n      closeModal();\n      return;\n    }\n\n    // Enter or Space on case card to open details\n    if (e.key === 'Enter' || e.key === ' ') {\n      const caseCard = e.target.closest('.case-card');\n      if (caseCard) {\n        e.preventDefault(); // Prevent scroll on Space\n        const caseId = caseCard.dataset.caseId;\n        if (caseId) {\n          const caseData = caseListener.getCase(caseId);\n          if (caseData) {\n            showCaseDetail(caseData);\n            caseListener.markViewed(caseId);\n          }\n        }\n      }\n    }\n  });\n\n  // Visibility change - resume polling if tab becomes visible\n  document.addEventListener('visibilitychange', () => {\n    if (document.visibilityState === 'visible') {\n      console.log('[Kiosk] Tab visible - fetching latest cases');\n      caseListener.fetchCases();\n    }\n  });\n}\n\n/**\n * Close case detail modal\n */\nfunction closeModal() {\n  const modal = document.getElementById('caseDetailModal');\n  if (modal) {\n    modal.style.display = 'none';\n    modal.querySelector('.modal-content').innerHTML = '';\n  }\n}\n\n/**\n * Handle application errors\n */\nwindow.addEventListener('error', (event) => {\n  console.error('[Kiosk] Unhandled error:', event.error);\n});\n\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('[Kiosk] Unhandled rejection:', event.reason);\n});\n\n/**\n * Start application when DOM ready\n */\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeKiosk);\n} else {\n  initializeKiosk();\n}\n\n/**\n * Export for debugging\n */\nwindow.kioskApp = {\n  getCases: () => currentCases,\n  getStatus: () => caseListener.getStatus(),\n  refresh: () => caseListener.fetchCases(),\n  playAlert: () => playNewCaseAlert(),\n};\n"],"file":"assets/index-8Vr71J35.js"}